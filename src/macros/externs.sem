extern branchFactoryExtern: [createBranch:[address,address,bytes32]:int256, getLastBranch:[]:int256]
extern disputeBondTokenFactoryExtern: [createDisputeBondToken:[address,address,address,uint256,bytes32]:int256, getLastDisputeBond:[]:int256]
extern iterableMapFactoryExtern: [createIterableMap:[address,address]:int256, getLastIterableMap:[]:int256]
extern mapFactoryExtern: [createMap:[address,address]:int256, getlastMap:[]:int256]
extern marketFactoryExtern: [createMarket:[address,address,uint256,uint256,uint256,int256,address,address,int256,int256,address,int256]:int256, getLastMarket:[]:int256]
extern orderedSetFactoryExtern: [createOrderedSet:[address,address]:int256, getlastOrderedSet:[]:int256]
extern registrationTokenFactoryExtern: [createRegistrationToken:[address,address]:int256, getLastRegistrationToken:[]:int256]
extern reportingTokenFactoryExtern: [createReportingToken:[address,address,uint256[]]:address, getLastReportingToken:[]:int256]
extern reportingWindowFactoryExtern: [createReportingWindow:[address,address,int256]:address, getLastReportingWindow:[]:address]
extern reputationTokenFactoryExtern: [createReputationToken:[address,address]:int256, getLastReputationToken:[]:int256]
extern setFactoryExtern: [createSet:[address,address]:int256, getlastSet:[]:int256]
extern shareTokenFactoryExtern: [createShareToken:[address,address,int256]:int256, getLastShareToken:[]:int256]
extern sortedLinkedListFactoryExtern: [createSortedLinkedList:[address,address]:int256, getLastSortedLinkedList:[]:int256]
extern stackFactoryExtern: [createStack:[address,address]:int256, getlastStack:[]:int256]
extern topicsFactoryExtern: [createTopics:[address]:int256, getLastTopics:[]:int256]
extern delegatorExtern: [setup:[int256,int256]:int256]
extern iterableMapExtern: [add:[bytes32,uint256]:int256, addOrUpdate:[bytes32,uint256]:int256, contains:[bytes32]:int256, count:[]:uint256, getByKey:[bytes32]:uint256, getByKeyOrZero:[bytes32]:uint256, getByOffset:[uint256]:bytes32, initialize:[address]:int256, remove:[bytes32]:int256, update:[bytes32,uint256]:int256]
extern mapExtern: [addMapItem:[int256,int256]:int256, contains:[int256]:int256, count:[]:int256, getValue:[int256]:int256, getValueOrZero:[int256]:int256, initialize:[address]:int256, remove:[int256]:int256]
extern orderedSetExtern: [assertContains:[int256]:_, assertEmpty:[]:_, assertInvariants:[]:_, assertNotEmpty:[]:_, contains:[int256]:int256, getHead:[]:int256, getNext:[int256]:int256, getPrev:[int256]:int256, initialize:[address]:int256, insertAfter:[int256,int256]:int256, insertBefore:[int256,int256]:int256, pop:[]:int256, push:[int256]:int256]
extern setExtern: [getTypeName:[]:bytes32, addSetItem:[address]:int256, contains:[address]:int256, count:[]:uint256, initialize:[address]:int256, remove:[address]:int256]
extern sortedLinkedListExtern: [add:[int256,int256[]]:int256, assertInvariants:[]:_, contains:[int256]:int256, count:[]:int256, findNodeToInsertBefore:[int256,int256]:int256, getBestHint:[int256[],int256]:int256, getHead:[]:int256, getNext:[int256]:int256, getPrev:[int256]:int256, getTail:[]:int256, hasNext:[int256]:int256, hasPrev:[int256]:int256, initialize:[address]:int256, insertAtHead:[int256]:int256, insertAtTail:[int256]:int256, insertFirstItem:[int256]:int256, insertInMiddle:[int256,int256]:int256, isEmpty:[]:int256, isValidHint:[int256,int256]:int256, remove:[int256]:int256, tryGetNext:[int256]:int256, tryGetPrev:[int256]:int256]
extern stackExtern: [initialize:[address]:int256, isEmpty:[]:int256, peek:[]:int256, pop:[]:int256, push:[int256]:int256]
extern branchExtern: [fork:[]:bool, getChildBranch:[int256]:address, getCurrentReportingWindow:[]:address, getForkEndTime:[]:uint256, getForkingMarket:[]:address, getNextReportingWindow:[]:address, getParentBranch:[]:address, getParentPayoutDistributionHash:[]:bytes32, getPreviousReportingWindow:[]:address, getReportingPeriodDurationInSeconds:[]:uint256, getReportingWindowByMarketEndTime:[uint256,bool]:address, getReportingWindowByTimestamp:[uint256]:address, getReportingWindowId:[uint256]:address, getReputationToken:[]:address, getTopics:[]:address, getTypeName:[]:bytes32, initialize:[address,bytes32]:bool, isContainerForMarket:[address]:bool, isContainerForRegistrationToken:[address]:bool, isContainerForReportingToken:[address]:bool, isContainerForReportingWindow:[address]:bool, isContainerForShareToken:[address]:bool, isParentOf:[address]:bool]
extern disputeBondTokenExtern: [allowance:[address,address]:uint256, approve:[address,uint256]:bool, balanceOf:[address]:uint256, getBondHolder:[]:address, getBondRemainingToBePaidOut:[]:uint256, getMarket:[]:address, getDisputedPayoutDistributionHash:[]:bytes32, getReputationToken:[]:address, initialize:[address,address,uint256,bytes32]:bool, getTotalSupply:[]:uint256, transfer:[address,uint256]:bool, transferFrom:[address,address,uint256]:bool, withdraw:[]:bool]
extern registrationTokenExtern: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:uint256, getBranch:[]:int256, getPeakSupply:[]:int256, getReportingWindow:[]:int256, getReputationToken:[]:int256, initialize:[address]:int256, redeem:[]:int256, register:[]:int256, getTotalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256]
extern marketExtern: [getReportingState:[]:uint256,approveSpenders:[]:int256, automatedReport:[int256[]]:int256, canBeReportedOn:[]:int256, changeCreator:[address]:int256, decreaseMarketCreatorSettlementFeeInAttoethPerEth:[int256]:int256, derivePayoutDistributionHash:[int256[]]:bytes32, disputeAllReporters:[]:int256, disputeAutomatedReport:[]:int256, disputeLimitedReporters:[]:int256, getAllReportersDisputeBondToken:[]:int256, getAutomatedReportDisputeDueTimestamp:[]:uint256, getAutomatedReportDueTimestamp:[]:uint256, getAutomatedReporterDisputeBondToken:[]:int256, getBranch:[]:int256, getCompleteSetCostInAttotokens:[]:int256, getOwner:[]:address, getDenominationToken:[]:int256, getEndTime:[]:uint256, getFinalPayoutDistributionHash:[]:bytes32, getFinalWinningReportingToken:[]:int256, getFinalizationTime:[]:uint256, getLimitedReportersDisputeBondToken:[]:int256, getMarketCreatorSettlementFeeInAttoethPerEth:[]:int256, getMaxDisplayPrice:[]:int256, getMinDisplayPrice:[]:int256, getNumberOfOutcomes:[]:uint8, getMarketDenominator:[]:int256, getRegistrationToken:[]:int256, getReportingToken:[int256[]]:int256, getReportingTokenOrZeroByPayoutDistributionHash:[bytes32]:int256, getReportingWindow:[]:int256, getReputationToken:[]:int256, getShareToken:[uint8]:int256, getTentativeWinningPayoutDistributionHash:[]:bytes32, getTopic:[]:bytes32, initialize:[address,uint256,int256,int256,int256,address,address,int256,int256,address,int256]:int256, isContainerForDisputeBondToken:[address]:int256, isContainerForReportingToken:[address]:int256, isContainerForShareToken:[address]:int256, isDoneWithAllReporters:[]:int256, isDoneWithAutomatedReporters:[]:int256, isDoneWithLimitedReporters:[]:int256, isFinalized:[]:int256, isInAllDisputePhase:[]:int256, isInAllReportingPhase:[]:int256, isInAutomatedDisputePhase:[]:int256, isInAutomatedReportingPhase:[]:int256, isInLimitedDisputePhase:[]:int256, isInLimitedReportingPhase:[]:int256, migrateThroughAllForks:[]:int256, migrateThroughOneFork:[]:int256, needsMigration:[]:int256, shouldCollectReportingFees:[]:int256, fundDisputeBondWithReputation:[address,address,uint256]:int256, transferIncorrectDisputeBondsToWinningReportingToken:[]:int256, tryFinalize:[]:int256, tryFinalizeAllReporting:[]:int256, tryFinalizeAutomatedReport:[]:int256, tryFinalizeFork:[]:int256, tryFinalizeLimitedReporting:[]:int256, updateTentativeWinningPayoutDistributionHash:[bytes32]:int256, validatePayoutNumerators:[int256[]]:int256]
extern repEscapeHatchExtern: [test:[]:int256]
extern reportingTokenExtern: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:uint256, buy:[int256]:int256, extractBondHolderPayments:[]:int256, getBranch:[]:int256, getMarket:[]:int256, getPayoutDistributionHash:[]:bytes32, getPayoutNumerator:[uint8]:int256, getRegistrationToken:[]:int256, getReportingWindow:[]:int256, getReputationToken:[]:int256, initialize:[address,int256[]]:int256, migrateLosingTokens:[]:int256, redeemDisavowedTokens:[address]:int256, redeemForkedTokens:[address]:int256, redeemWinningTokens:[address]:int256, getTotalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256]
extern reportingWindowExtern: [getTypeName:[]:bytes32, createNewMarket:[uint256,int256,int256,int256,address,address,int256,int256,address,int256]:int256, getBranch:[]:int256, getDisputeEndTime:[]:uint256, getDisputeStartTime:[]:uint256, getEndTime:[]:uint256, getMaxReportsPerLimitedReporterMarket:[]:uint256, getRegistrationToken:[]:int256, getReportingEndTime:[]:uint256, getReportingStartTime:[]:uint256, getReportsByReporter:[address]:uint256, getReputationToken:[]:int256, getRequiredReportsPerReporterForlimitedReporterMarkets:[]:uint256, getStartTime:[]:uint256, getTargetReportsPerLimitedReporterMarket:[]:uint256, getTargetReportsPerReporter:[]:uint256, initialize:[address,int256]:int256, isActive:[]:int256, isContainerForMarket:[address]:int256, isContainerForRegistrationToken:[address]:int256, isDisputeActive:[]:int256, isDoneReporting:[address]:int256, isReportingActive:[]:int256, migrateMarketInFromNibling:[]:int256, migrateMarketInFromSibling:[]:int256, noteReport:[address,address,bytes32]:int256, privateAddMarket:[address]:int256, privateNoteReport:[address,address]:int256, removeMarket:[]:int256, updateMarketPhase:[]:int256]
extern reputationTokenExtern: [allowance:[address,address]:uint256, approve:[address,uint256]:bool, assertReputationTokenIsLegit:[address]:_, balanceOf:[address]:uint256, branch:[]:address, initialize:[address]:bool, migrateFromLegacyRepContract:[]:bool, migrateIn:[address,uint256]:bool, migrateOut:[address,address,uint256]:bool, getTopMigrationDestination:[]:address, getTotalSupply:[]:uint256, transfer:[address,uint256]:bool, transferFrom:[address,address,uint256]:bool, trustedTransfer:[address,address,uint256]:bool]
extern cancelOrderExtern: [cancelOrder:[bytes32,int8,address,uint8]:bool, refundOrder:[address,uint8,uint256,uint256,address,uint8]:bool]
extern completeSetsExtern: [buyCompleteSets:[address,address,uint256]:bool, publicBuyCompleteSets:[address,uint256]:bool, publicSellCompleteSets:[address,uint256]:bool, sellCompleteSets:[address,address,uint256]:bool, setController:[address]:int256, suicideFunds:[address]:_]
extern makeOrderExtern: [makeOrder:[address,uint8,uint256,int256,address,uint8,bytes32,bytes32,uint256]:bytes32, publicMakeOrder:[uint8,uint256,int256,address,uint8,bytes32,bytes32,uint256]:bytes32]
extern ordersExtern: [getOrderId:[uint8,address,uint256,int256,address,uint256,uint8,uint256,uint256]:bytes32, getAmount:[bytes32]:uint256, getPrice:[bytes32]:int256, getOrderMaker:[bytes32]:address, getOrderSharesEscrowed:[bytes32]:uint256, getBestOrderId:[uint8,address,uint8]:bytes32, getWorseOrderId:[bytes32]:bytes32, getLastOutcomePrice:[address,uint8]:int256, saveOrder:[bytes32,uint8,address,uint256,int256,address,uint8,uint256,uint256,bytes32,bytes32,uint256,uint256]:bytes32, fillOrder:[bytes32,uint8,address,uint8,uint256,uint256]:bool, setPrice:[address,uint8,int256]:bool, modifyMarketVolume:[address,uint256]:bool, takeOrderLog:[address,uint8,uint8,bytes32,address,uint256,uint256,uint256,uint256,uint256]:bool]
extern ordersFetcherExtern: [ascendOrderList:[uint8,address,uint8,int256,address]:int256[], descendOrderList:[uint8,address,uint8,int256,address]:int256[], findBoundingOrders:[uint8,address,uint8,int256,address,address,address,address]:int256[], getOrder:[bytes32,uint8,address,uint8]:int256[], getOrderIDs:[uint8,address,uint8,address,int256]:int256[], initialize:[address]:_]
#extern cashExtern: [allowance:[address,address]:uint256, approve:[address,uint256]:bool, balanceOf:[address]:uint256, depositEther:[address]:bool, getDecimals:[]:uint256, getInitiated:[]:bool, getName:[]:bytes32, getSymbol:[]:bytes32, initialize:[address]:_, depositEther:[]:bool, withdrawEther:[address,uint256]:bool, setController:[address]:bool, suicideFunds:[address]:_, getTotalSupply:[]:uint256, transfer:[address,uint256]:bool, transferFrom:[address,address,uint256]:bool, withdrawEther:[address,address,uint256]:bool]
extern shareTokenExtern: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:int256, createShares:[address,uint256]:int256, destroyShares:[address,uint256]:int256, getDecimals:[]:int256, getMarket:[]:int256, getName:[]:int256, getOutcome:[]:int256, getSymbol:[]:int256, getTypeName:[]:int256, initialize:[address,uint8]:int256, isShareToken:[]:int256, setController:[address]:int256, suicideFunds:[address]:_, getTotalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256]
extern takeAskOrderExtern: [initialize:[address]:int256, setController:[address]:int256, suicideFunds:[address]:_, takeAskOrder:[address,bytes32,address,uint8,uint256,uint256]:uint256]
extern takeBidOrderExtern: [takeBidOrder:[address,bytes32,address,uint256,uint256]:uint256]
extern takeOrderExtern: [initialize:[address]:int256, publicTakeOrder:[bytes32,uint8,address,uint8,uint256,uint256]:int256, setController:[address]:int256, suicideFunds:[address]:_, takeOrder:[address,bytes32,uint8,address,uint8,uint256,uint256]:uint256]
extern topicsExtern: [count:[]:uint256, getPopularity:[bytes32]:uint256, getPopularityByOffset:[uint256]:uint256, getTopicByOffset:[uint256]:bytes32, initialize:[]:int256, setController:[address]:int256, suicideFunds:[address]:_, updatePopularity:[bytes32,uint256]:bool]
extern tradeExtern: [initialize:[address]:int256, publicBuy:[address,uint8,uint256,int256,uint256]:int256, publicSell:[address,uint8,uint256,int256,uint256]:int256, publicTakeBestOrder:[int256,address,uint8,uint256,int256,uint256]:int256, publicTrade:[int256,address,uint8,uint256,int256,uint256]:int256, setController:[address]:int256, suicideFunds:[address]:_, takeBestOrder:[address,uint8,address,uint8,uint256,int256,uint256]:int256, trade:[address,uint8,address,uint8,uint256,int256,uint256]:int256]
extern tradingEscapeHatchExtern: [claimSharesInUpdate:[address]:int256, getFrozenShareValue:[address,uint8]:int256, initialize:[address]:int256]
extern marketCreationExtern: [createCategoricalMarket:[address,uint256,uint256,int256,address,address,int256]:int256, createScalarMarket:[address,uint256,int256,address,int256,int256,address,int256]:int256]
extern marketFeeCalculatorExtern: [getOutstandingSharesInAttoeth:[int256]:int256, getRepMarketCapInAttoeth:[int256]:int256, getReportingFeeInAttoethPerEth:[address]:int256, getTargetRepMarketCapInAttoeth:[int256]:int256, getTargetReporterGasCosts:[]:int256, getValidityBond:[address]:int256]
extern marketFetcherExtern: []
extern orderBookExtern: [getOrderBook:[uint256,address,uint256,uint256,uint256]:int256[], setController:[address]:int256, suicideFunds:[address]:_]
extern registerExtern: [register:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]
extern reputationFaucetExtern: [reputationFaucet:[int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]
extern controllerExtern: [addToWhitelist:[address]:bool, assertIsWhitelisted:[address]:bool, assertOnlySpecifiedCaller:[address,bytes32]:bool, emergencyStop:[]:bool, getOwner:[]:address, lookup:[bytes32]:address, onlyInEmergency:[]:bool, release:[]:bool, removeFromWhitelist:[address]:bool, setValue:[bytes32,address]:bool, stopInEmergency:[]:bool, suicide:[address,address]:bool, switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed:[]:bool, transferOwnership:[address]:bool, updateController:[address,address]:bool]
extern mutexExtern: [acquire:[]:int256, release:[]:int256]
