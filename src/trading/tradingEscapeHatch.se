# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

#### must be first data members to match Delegator.sol
data controller
data controllerLookupName
####

macro ORDERS: self.controller.lookup('Orders')

inset('../macros/externs.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/require.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')

data owner

data frozenShareValue[][]

macro BID: 1
macro ASK: 2

def any():
    assertNoValue()

def init():
    self.owner = msg.sender

# this is necessary because once we are in decentralized mode, contract "upgrades" will be in the form of the UI pointing at new contracts and the old ones slowly dying off.  We will _not_ be using the delegated cotnract updater long term, which means we need an emergency exit that allows one to halt everything and liquidate the system as _fairly_ as possible
def claimSharesInUpdate(market: address):
    self.controller.onlyInEmergency()
    require(market)

    numOutcomes = market.getNumberOfOutcomes()
    marketCurrency = market.getDenominationToken()

    outcome = 0
    while outcome < numOutcomes:
        shareToken = market.getShareToken(outcome)
        sharesOwned = shareToken.balanceOf(msg.sender)
        if(sharesOwned > 0):
            frozenShareValue = self.getFrozenShareValue(market, outcome)
            shareToken.destroyShares(msg.sender, sharesOwned)
            amountToTransfer = safeFxpMul(sharesOwned, frozenShareValue)
            require(marketCurrency.transferFrom(market, msg.sender, amountToTransfer))
        outcome += 1
    return(1)

def getFrozenShareValue(market: address, outcome: uint8):
    numberOfOutcomes = market.getNumberOfOutcomes()
    require(0 <= outcome and outcome < numberOfOutcomes)
    require(market)

    if self.frozenShareValue[market][outcome]:
        return self.frozenShareValue[market][outcome]

    maxValue = market.getMarketDenominator()
    range = maxValue
    numberOfMissingBids = 0
    shiftedPrices = array(numberOfOutcomes)
    sumOfBids = 0

    # fill in any outcome prices that have an order history
    tempOutcome = 0
    while tempOutcome < numberOfOutcomes:
        lastTradePrice = ORDERS.getLastOutcomePrice(market, tempOutcome)
        lastTradePriceShifted = lastTradePrice
        if lastTradePriceShifted:
            shiftedPrices[tempOutcome] = lastTradePriceShifted
            sumOfBids += lastTradePriceShifted
        else:
            numberOfMissingBids += 1
        tempOutcome += 1

    # fill in any outcome prices that have no order history
    if numberOfMissingBids:
        fauxBidPrice = (market.getMarketDenominator() - sumOfBids) / numberOfMissingBids
        # to avoid any oddities, every share is worth _something_, even if it is just 1 attotoken
        if fauxBidPrice <= 0:
            fauxBidPrice = 1
        tempOutcome = 0
        while tempOutcome < numberOfOutcomes:
            if not shiftedPrices[tempOutcome]:
                shiftedPrices[tempOutcome] = fauxBidPrice
                sumOfBids += fauxBidPrice
            tempOutcome += 1

    denominator = sumOfBids

    # set the final prices to be what should be paid out to each outcome share holder
    tempOutcome = 0
    while tempOutcome < numberOfOutcomes:
        # FIXME: think about this math, can shiftedPrice * range be greater than 2*254?  Can shiftedPrice / denominator lead to rounding errors?  Should we * then / or / then *?
        # Yes it can be greater, shifted / denominator will lead to rounding errors
        self.frozenShareValue[market][tempOutcome] = safeFxpDiv(safeFxpMul(shiftedPrices[tempOutcome], range), denominator)
        tempOutcome += 1

    return self.frozenShareValue[market][outcome]
